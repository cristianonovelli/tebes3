<?xml version="1.0" encoding="utf-8"?>
<!--
     Test Assertions Part 2 - Test Assertion Markup Language Version 1.0
     Committee Specification 02
     30 November 2011
     Copyright (c) OASIS Open 2011. All Rights Reserved.
     Source: http://docs.oasis-open.org/tag/taml/v1.0/cs02/xsd/
-->
<!-- 
   Test Assertion Markup Language
   Version: 1.0 
   OASIS Open Test Assertion Guidelines TC
   Date: May 2011
   Editor: Stephen D. Green
   
   Copyright © OASIS Open 2008-2011. All Rights Reserved.
   
   All capitalized terms in the following text have the meanings assigned to them
   in the OASIS Intellectual Property Rights Policy (the "OASIS IPR Policy"). The
   full Policy may be found at the OASIS website.
   
   This document and translations of it may be copied and furnished to others, and
   derivative works that comment on or otherwise explain it or assist in its
   implementation may be prepared, copied, published, and distributed, in whole or
   in part, without restriction of any kind, provided that the above copyright
   notice and this section are included on all such copies and derivative works.
   However, this document itself may not be modified in any way, including by
   removing the copyright notice or references to OASIS, except as needed for the
   purpose of developing any document or deliverable produced by an OASIS
   Technical Committee (in which case the rules applicable to copyrights, as set
   forth in the OASIS IPR Policy, must be followed) or as required to translate it
   into languages other than English.
   
   The limited permissions granted above are perpetual and will not be revoked by
   OASIS or its successors or assigns.
   
   This document and the information contained herein is provided on an "AS IS"
   basis and OASIS DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT
   LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT
   INFRINGE ANY OWNERSHIP RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR
   FITNESS FOR A PARTICULAR PURPOSE. 
  -->
<xs:schema xmlns="http://docs.oasis-open.org/ns/tag/taml-201002/"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://docs.oasis-open.org/ns/tag/taml-201002/" elementFormDefault="qualified"
  attributeFormDefault="unqualified" version="1.0">

  <xs:element name="testAssertion" type="testAssertion_type"/>
  <xs:element name="testAssertionSet" type="testAssertionSet_type"/>

  <xs:simpleType name="codeExtension_type">
    <xs:restriction base="xs:QName">
      <xs:pattern value="[\c-[:]]+:[\c-[:]]+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="comment_type" mixed="true">
    <xs:sequence>
      <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##any" processContents="skip"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="skip"/>
  </xs:complexType>

  <xs:complexType name="common_type" mixed="true">
    <xs:sequence>
      <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##any" processContents="skip"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="skip"/>
  </xs:complexType>

  <xs:complexType name="description_type" mixed="true">
    <xs:sequence>
      <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##any" processContents="skip"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="skip"/>
  </xs:complexType>

  <xs:complexType name="interpretation_type">
    <xs:simpleContent>
      <xs:extension base="xs:normalizedString">
        <xs:anyAttribute namespace="##other" processContents="skip"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="normativeSource_type" mixed="true">
    <xs:sequence>
      <xs:element name="comment" type="comment_type" minOccurs="0"/>
      <xs:element name="interpretation" type="interpretation_type" minOccurs="0"/>
      <xs:element name="refSourceItem" type="refSourceItem_type" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="textSourceItem" type="textSourceItem_type" minOccurs="0"
        maxOccurs="unbounded"/>
      <xs:element name="derivedSourceItem" type="refSourceItem_type" minOccurs="0"
        maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="skip"/>
  </xs:complexType>

  <xs:complexType name="predicate_type" mixed="true">
    <xs:sequence>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="lg" type="xs:normalizedString"/>
    <xs:anyAttribute namespace="##other" processContents="skip"/>
  </xs:complexType>

  <xs:complexType name="prerequisite_type" mixed="true">
    <xs:sequence>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="lg" type="xs:normalizedString"/>
    <xs:anyAttribute namespace="##other" processContents="skip"/>
  </xs:complexType>

  <xs:complexType name="prescription_type">
    <xs:simpleContent>
      <xs:extension base="xs:normalizedString">
        <xs:attribute name="level" type="prescriptionLevelCode_type"/>
        <xs:anyAttribute namespace="##other" processContents="skip"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:simpleType name="prescriptionLevelCode_type">
    <xs:union memberTypes="prescriptionLevelBaseCode_type codeExtension_type"/>
  </xs:simpleType>

  <xs:simpleType name="prescriptionLevelBaseCode_type">
    <xs:restriction base="xs:normalizedString">
      <xs:enumeration value="mandatory"/>
      <xs:enumeration value="permitted"/>
      <xs:enumeration value="preferred"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="refSourceItem_type">
    <xs:simpleContent>
      <xs:extension base="xs:normalizedString">
        <xs:attributeGroup ref="resource_attributeGroup"/>
        <xs:anyAttribute namespace="##other" processContents="skip"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="report_type" mixed="true">
    <xs:sequence>
      <xs:any namespace="##any" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="lg" type="xs:normalizedString"/>
    <xs:attribute name="label" type="xs:normalizedString"/>
    <xs:attribute name="message" type="xs:normalizedString"/>
    <xs:attribute name="when" type="xs:normalizedString"/>
    <xs:anyAttribute namespace="##other" processContents="skip"/>
  </xs:complexType>

  <xs:attributeGroup name="resource_attributeGroup">
    <xs:attribute name="srcname" type="xs:normalizedString"/>
    <xs:attribute name="uri" type="xs:anyURI"/>
    <xs:attribute name="documentId" type="xs:normalizedString"/>
    <xs:attribute name="versionId" type="xs:normalizedString"/>
    <xs:attribute name="revisionId" type="xs:normalizedString"/>
    <xs:attribute name="resourceProvenanceId" type="xs:normalizedString"/>
  </xs:attributeGroup>

  <xs:complexType name="tag_type">
    <xs:simpleContent>
      <xs:extension base="xs:normalizedString">
        <xs:attribute name="tname" type="xs:normalizedString" use="required"/>
        <xs:anyAttribute namespace="##other" processContents="skip"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="target_type" mixed="true">
    <xs:sequence>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="type" type="xs:normalizedString"/>
    <xs:attribute name="lg" type="xs:normalizedString"/>
    <xs:attribute name="idscheme" type="xs:normalizedString"/>
    <xs:anyAttribute namespace="##other" processContents="skip"/>
  </xs:complexType>

  <xs:complexType name="testAssertion_type">
    <xs:sequence>
      <xs:element name="description" type="description_type" minOccurs="0"/>
      <xs:element name="normativeSource" type="normativeSource_type" minOccurs="0"/>
      <xs:element name="var" type="var_type" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="target" type="target_type" minOccurs="0"/>
      <xs:element name="prerequisite" type="prerequisite_type" minOccurs="0"/>
      <xs:element name="predicate" type="predicate_type" minOccurs="0"/>
      <xs:element name="prescription" type="prescription_type" minOccurs="0"/>
      <xs:element name="report" type="report_type" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="tag" type="tag_type" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="id" type="xs:normalizedString" use="required"/>
    <xs:attribute name="lg" type="xs:normalizedString"/>
    <xs:attribute name="name" type="xs:normalizedString"/>
    <xs:attribute name="schemaVersionId" type="xs:normalizedString"/>
    <xs:anyAttribute namespace="##other" processContents="skip"/>
  </xs:complexType>

  <xs:complexType name="testAssertionRefList_type">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="testAssertionRef"
        type="testAssertionRef_type"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="sourcedoc" type="xs:anyURI"/>
    <xs:attribute name="listname" type="xs:normalizedString"/>
    <xs:anyAttribute namespace="##other" processContents="skip"/>
  </xs:complexType>

  <xs:complexType name="testAssertionRef_type">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="taid" type="xs:normalizedString"/>
        <xs:attribute name="name" type="xs:normalizedString"/>
        <xs:attribute name="sourcedoc" type="xs:anyURI"/>
        <xs:anyAttribute namespace="##other" processContents="skip"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="testAssertionSet_type">
    <xs:sequence>
      <xs:element minOccurs="0" name="common" type="common_type"/>
      <xs:element name="testAssertionRefList" type="testAssertionRefList_type" minOccurs="0"
        maxOccurs="unbounded"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="testAssertion" type="testAssertion_type"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="setid" type="xs:normalizedString"/>
    <xs:attribute name="setname" type="xs:normalizedString"/>
    <xs:anyAttribute namespace="##other" processContents="skip"/>
  </xs:complexType>

  <xs:complexType name="textSourceItem_type">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="extension" type="xs:boolean"/>
        <xs:attribute name="txtname" type="xs:normalizedString"/>
        <xs:anyAttribute namespace="##other" processContents="skip"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="var_type" mixed="true">
    <xs:sequence>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="lg" type="xs:normalizedString"/>
    <xs:attribute name="vname" type="xs:normalizedString" use="required"/>
    <xs:attribute name="vtype" type="xs:normalizedString"/>
    <xs:anyAttribute namespace="##other" processContents="skip"/>
  </xs:complexType>

</xs:schema>
